//
// This code is based on GEMCSCSegFit code
//

#include "RecoLocalMuon/RPCCSCSegment/src/RPCCSCSegNewFit.h"
#include "DataFormats/GeometryVector/interface/GlobalPoint.h"
#include "DataFormats/MuonDetId/interface/CSCDetId.h"
// rpc includes

#include "Geometry/CSCGeometry/interface/CSCLayer.h"
// rpc includes

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

void RPCCSCSegNewFit::fit(void) {
  if ( fitdone() ) return; // don't redo fit unnecessarily
  fitlsq();
}


void RPCCSCSegNewFit::fitlsq(void) {

  SMatrix4 M; // 4x4, init to 0
  SVector4 B; // 4x1, init to 0; 

  std::vector<const TrackingRecHit*>::const_iterator ih = hits_.begin();

  // Loop over the TrackingRecHits and make small (2x2) matrices used to fill the blockdiagonal covariance matrix E^-1
  for (ih = hits_.begin(); ih != hits_.end(); ++ih) 
    {
      const TrackingRecHit& hit = (**ih);
      GlobalPoint gp;
      DetId d = DetId(hit.rawId());
      if(d.subdetId() == MuonSubdetId::GEM) // incluir a RPC aqui!
	{
	  const GEMEtaPartition* roll = gemetapartition(GEMDetId(d));
	  gp = roll->toGlobal(hit.localPosition());
	}
      else if(d.subdetId() == MuonSubdetId::CSC) 
	{
	  const CSCLayer* layer = cscchamber(CSCDetId(d))->layer(CSCDetId(d).layer());
	  gp = layer->toGlobal(hit.localPosition());
	}
      //else { edm::LogVerbatim("GEMCSCSegFit") << "[GEMCSCSegFit:fit2] - TrackingRecHit is not in GEM or CSC subdetector"; }
      LocalPoint lp = refcscchamber()->toLocal(gp); 
      
      // Local position of hit w.r.t. chamber
      double u = lp.x();
      double v = lp.y();
      double z = lp.z();
      
      // Covariance matrix of local errors 
      SMatrixSym2 IC; // 2x2, init to 0
      
      IC(0,0) = hit.localPositionError().xx();
      IC(1,1) = hit.localPositionError().yy();
      //@@ NOT SURE WHICH OFF-DIAGONAL ELEMENT MUST BE DEFINED BUT (1,0) WORKS
      //@@ (and SMatrix enforces symmetry)
      IC(1,0) = hit.localPositionError().xy();
      // IC(0,1) = IC(1,0);

      
      // Invert covariance matrix (and trap if it fails!)
      bool ok = IC.Invert();
      if ( !ok ) 
	{
	  return; // MATRIX INVERSION FAILED ... QUIT VOID FUNCTION
	}

      // M = (AT E A)
      // B = (AT E m)
      // for now fill only with sum of blockdiagonal 
      // elements of (E^-1)_i = IC_i for hit i
      M(0,0) += IC(0,0);
      M(0,1) += IC(0,1);
      M(0,2) += IC(0,0) * z;
      M(0,3) += IC(0,1) * z;
      B(0)   += u * IC(0,0) + v * IC(0,1);
      
      M(1,0) += IC(1,0);
      M(1,1) += IC(1,1);
      M(1,2) += IC(1,0) * z;
      M(1,3) += IC(1,1) * z;
      B(1)   += u * IC(1,0) + v * IC(1,1);
      
      M(2,0) += IC(0,0) * z;
      M(2,1) += IC(0,1) * z;
      M(2,2) += IC(0,0) * z * z;
      M(2,3) += IC(0,1) * z * z;
      B(2)   += ( u * IC(0,0) + v * IC(0,1) ) * z;
      
      M(3,0) += IC(1,0) * z;
      M(3,1) += IC(1,1) * z;
      M(3,2) += IC(1,0) * z * z;
      M(3,3) += IC(1,1) * z * z;
      B(3)   += ( u * IC(1,0) + v * IC(1,1) ) * z;
      
    } // End Loop over the TrackingRecHits to make the block matrices to be filled in M and B
  
  SVector4 p;
  bool ok = M.Invert();
  if (!ok )
    {
      return; // MATRIX INVERSION FAILED ... QUIT VOID FUNCTION 
    }
  else 
    {
      p = M * B;
    }

  // fill member variables  (note origin has local z = 0)
  //  intercept_
  intercept_ = LocalPoint(p(0), p(1), 0.);
  
  // localdir_ - set so segment points outwards from IP
  uslope_ = p(2);
  vslope_ = p(3);
  setOutFromIP();
  
  // calculate chi2 of fit
  setChi2( );

  // flag fit has been done
  fitdone_ = true;

}



void RPCCSCSegNewFit::setChi2(void) {
  
  double chsq = 0.;
  bool gem = false; // incluir a RPC aqui

  std::vector<const TrackingRecHit*>::const_iterator ih;
  for (ih = hits_.begin(); ih != hits_.end(); ++ih) {

    const TrackingRecHit& hit = (**ih);
    GlobalPoint gp;
    DetId d = DetId(hit.rawId());
    if(d.subdetId() == MuonSubdetId::GEM) {  // incluir a RPC a partir daqui
      const GEMEtaPartition* roll = gemetapartition(GEMDetId(d));
      gp = roll->toGlobal(hit.localPosition());
      gem = true;
    }
    else if(d.subdetId() == MuonSubdetId::CSC) {
      const CSCLayer* layer = cscchamber(CSCDetId(d))->layer(CSCDetId(d).layer());
      gp = layer->toGlobal(hit.localPosition());
      gem = false;
    }
    //else { edm::LogVerbatim("GEMCSCSegFit") << "[GEMCSCSegFit:fit2] - TrackingRecHit is not in GEM or CSC subdetector"; }
    LocalPoint lp = refcscchamber()->toLocal(gp);
    
    double u = lp.x();
    double v = lp.y();
    double z = lp.z();
    
    double du = intercept_.x() + uslope_ * z - u;
    double dv = intercept_.y() + vslope_ * z - v;
    

    SMatrixSym2 IC; // 2x2, init to 0

    IC(0,0) = hit.localPositionError().xx();
    //    IC(0,1) = hit.localPositionError().xy();
    IC(1,0) = hit.localPositionError().xy();
    IC(1,1) = hit.localPositionError().yy();
    //    IC(1,0) = IC(0,1);

    // Invert covariance matrix
    bool ok = IC.Invert();
    if (!ok ){
      return; // MATRIX INVERSION FAILED ... QUIT VOID FUNCTION
    }
    chsq += du*du*IC(0,0) + 2.*du*dv*IC(0,1) + dv*dv*IC(1,1);

  }

  // fill member variables
  chi2_ = chsq;
  ndof_ = 2.*hits_.size() - 4;

}


void RPCCSCSegNewFit::setOutFromIP() {
  // Set direction of segment to point from IP outwards
  // (Incorrect for particles not coming from IP, of course.)
  
  double dxdz = uslope_;
  double dydz = vslope_;
  double dz   = 1./sqrt(1. + dxdz*dxdz + dydz*dydz);
  double dx   = dz*dxdz;
  double dy   = dz*dydz;
  LocalVector localDir(dx,dy,dz);

  // localDir sometimes needs a sign flip 
  // Examine its direction and origin in global z: to point outward
  // the localDir should always have same sign as global z...
  
  double globalZpos    = ( refcscchamber()->toGlobal( intercept_ ) ).z();
  double globalZdir    = ( refcscchamber()->toGlobal( localDir  ) ).z();
  double directionSign = globalZpos * globalZdir;
  localdir_ = (directionSign * localDir ).unit();
}




//
// AlgebraicSymMatrix GEMCSCSegFit::covarianceMatrix() {
// é necessário?
// se necessário tem que ser incluido os:
// GEMCSCSegFit::SMatrixSym16 GEMCSCSegFit::weightMatrix() {
// GEMCSCSegFit::SMatrix16by4 GEMCSCSegFit::derivativeMatrix() {
// AlgebraicSymMatrix GEMCSCSegFit::flipErrors( const SMatrixSym4& a ) { 


// essas funcoes sao necessarias?
// float GEMCSCSegFit::xfit( float z ) const {
// float GEMCSCSegFit::yfit( float z ) const {
// float GEMCSCSegFit::xdev( float x, float z ) const {
// float GEMCSCSegFit::ydev( float y, float z ) const {
// float GEMCSCSegFit::Rdev(float x, float y, float z) const {








